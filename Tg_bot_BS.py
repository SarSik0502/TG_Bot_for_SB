import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
import openpyxl

BOT_TOKEN = ""

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
storage = MemoryStorage()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class RegistrationStates(StatesGroup):
    fio = State()
    birth_date = State()
    phone_number = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Excel
def save_to_excel(fio, birth_date, phone_number):
    file_path = "spisok.xlsx"
    workbook = openpyxl.load_workbook(file_path)
    sheet = workbook.active
    sheet.append([fio, birth_date, phone_number])
    workbook.save("spisok.xlsx")

# –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(F.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def start_registration(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(RegistrationStates.fio)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –∏ –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message(RegistrationStates.fio)
async def ask_birth_date(message: types.Message, state: FSMContext):
    await state.update_data(fio=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(RegistrationStates.birth_date)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(RegistrationStates.birth_date)
async def ask_phone_number(message: types.Message, state: FSMContext):
    await state.update_data(birth_date=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(RegistrationStates.phone_number)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(RegistrationStates.phone_number)
async def finish_registration(message: types.Message, state: FSMContext):
    await state.update_data(phone_number=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    fio = user_data.get("fio")
    birth_date = user_data.get("birth_date")
    phone_number = user_data.get("phone_number")

    save_to_excel(fio, birth_date, phone_number)

    # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–§–ò–û: {fio}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}"
    )
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!")
    await how_find(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
@dp.message(F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip(message: types.Message):
    await skidka(message)

# –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏
async def skidka(message: types.Message):
    list = [[KeyboardButton(text="–î–∞")], [KeyboardButton(text="–ù–µ—Ç")]]
    keyboard = ReplyKeyboardMarkup(keyboard=list, resize_keyboard=True)
    text = '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ "City Nails", –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–∫–∏–¥–∫–∞ 20%.\n–•–æ—Ç–∏—Ç–µ –µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å?'
    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–∞"
@dp.message(F.text == "–î–∞")
async def skip(message: types.Message, state: FSMContext):
    await start_registration(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"
@dp.message(F.text == "–ù–µ—Ç")
async def skip(message: types.Message):
    await main_menu(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
@dp.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def send_contact(message: types.Message):
    address = "üè†–ê–¥—Ä–µ—Å: –ù–∏–∫–æ–ª—å—Å–∫–∞—è —É–ª., 25 ‚Ä¢ –º. –õ—É–±—è–Ω–∫–∞, —ç—Ç–∞–∂ 5\n\n"
    telephone = "üì±+7 (499) 686-18-66 \n"
    inst = "üì∏Instagram: \nhttps://www.instagram.com/citynails_moscow?igsh=MWZkanpyeTVyMHVjeA==\n\n"
    timew = "üïõ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:\n –ü–ù-–í–°: 10:00-22:00"
    text = address + telephone + inst + timew
    latitude = 55.759148
    longitude = 37.624625
    await message.answer(text)
    await message.answer_location(latitude, longitude)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ"
@dp.message(F.text == "–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ")
async def send_developer_info(message: types.Message):
    text = "üíªBSC - —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ IT –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞\nüìû +7 (965) 340-17-02\n‚úâÔ∏èbussupcom@yandex.ru"
    await message.answer(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
@dp.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def feedback(message: types.Message):
    list = [[KeyboardButton(text="Yandex –∫–∞—Ä—Ç—ã"), KeyboardButton(text="2–ì–ò–° –∫–∞—Ä—Ç—ã"),
             KeyboardButton(text="–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏")], [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")]]
    keyboard = ReplyKeyboardMarkup(keyboard=list, resize_keyboard=True)
    await message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö Yandex –∏ 2–ì–ò–°.\n\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏üëÆ",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—à —Å–∞–ª–æ–Ω"
@dp.message(F.text == "–ù–∞—à —Å–∞–ª–æ–Ω")
async def feedback(message: types.Message):
    list = [[KeyboardButton(text="–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º"), KeyboardButton(text="–ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞")],
             [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")]]
    keyboard = ReplyKeyboardMarkup(keyboard=list, resize_keyboard=True)
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"
@dp.message(F.text == "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")
async def feedback(message: types.Message):
    list = [[KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"), KeyboardButton(text="–°–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫")],
            [KeyboardButton(text="–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã"), KeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")],
             [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")]]
    keyboard = ReplyKeyboardMarkup(keyboard=list, resize_keyboard=True)
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–§–∏—Ä–º–µ–Ω–Ω—ã–µ –∏–¥–µ–∏"
@dp.message(F.text == "–§–∏—Ä–º–µ–Ω–Ω—ã–µ –∏–¥–µ–∏")
async def feedback(message: types.Message):
    list = [[KeyboardButton(text="–ú–∞–Ω–∏–∫—é—Ä"), KeyboardButton(text="–ü–µ–¥–∏–∫—é—Ä")],
             [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")]]
    keyboard = ReplyKeyboardMarkup(keyboard=list, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–∞–Ω–∏–∫—é—Ä"
@dp.message(F.text == "–ú–∞–Ω–∏–∫—é—Ä")
async def feedback(message: types.Message):
    list = [[KeyboardButton(text="–ì–æ—Ç–æ–≤—ã–µ –∏–¥–µ–∏"), KeyboardButton(text="–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä")],
             [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")]]
    keyboard = ReplyKeyboardMarkup(keyboard=list, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ–¥–∏–∫—é—Ä"
@dp.message(F.text == "–ü–µ–¥–∏–∫—é—Ä")
async def feedback(message: types.Message):
    list = [[KeyboardButton(text="–ì–æ—Ç–æ–≤—ã–µ –∏–¥–µ–∏"), KeyboardButton(text="–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä")],
             [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")]]
    keyboard = ReplyKeyboardMarkup(keyboard=list, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Yandex –∫–∞—Ä—Ç—ã"
@dp.message(F.text == "Yandex –∫–∞—Ä—Ç—ã")
async def yandex(message: types.Message):
    linkY = "https://yandex.ru/maps/-/CDx3jMY-"
    await message.answer(linkY)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "2–ì–ò–° –∫–∞—Ä—Ç—ã"
@dp.message(F.text == "2–ì–ò–° –∫–∞—Ä—Ç—ã")
async def twoG(message: types.Message):
    linkG = "https://go.2gis.com/phrhv"
    await message.answer(linkG)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ –º–∞—Å—Ç–µ—Ä—É"
@dp.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ –º–∞—Å—Ç–µ—Ä—É")
async def tips(message):
    link = "https://netmonet.co/"
    await message.answer(link)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
@dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await main_menu(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–π—Å –ª–∏—Å—Ç"
@dp.message(F.text == "–ü—Ä–∞–π—Å –ª–∏—Å—Ç")
async def price_list(message):
    image_path = "D:/Job/list.jfif"
    photo = FSInputFile(image_path)
    await bot.send_photo(message.chat.id, photo)

# –ö–∞–∫ –Ω–∞—à–ª–∏
async def how_find(message: types.Message):
    list = [[KeyboardButton(text="Instagram"), KeyboardButton(text="–Ø–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã"),
             KeyboardButton(text="–í–ö–æ–Ω—Ç–∞–∫—Ç–µ")], [KeyboardButton(text="Telegram-—Ä–∞—Å—Å—ã–ª–∫–∞"),
             KeyboardButton(text="–û—Ç –¥—Ä—É–∑–µ–π"), KeyboardButton(text="–£–≤–∏–¥–µ–ª –Ω–∞ —É–ª–∏—Ü–µ")],
            [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]]
    keyboard = ReplyKeyboardMarkup(keyboard=list, resize_keyboard=True)
    await message.answer("–ö–∞–∫ –í—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?", reply_markup=keyboard)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(message: types.Message):
    list = [[KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"), KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
             KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")], [KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ –º–∞—Å—Ç–µ—Ä—É"),
             KeyboardButton(text="–ü—Ä–∞–π—Å –ª–∏—Å—Ç")], [KeyboardButton(text="–§–∏—Ä–º–µ–Ω–Ω—ã–µ –∏–¥–µ–∏"),
             KeyboardButton(text="–ù–∞—à —Å–∞–ª–æ–Ω")], [KeyboardButton(text="–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ"),
             KeyboardButton(text="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")]]
    keyboard = ReplyKeyboardMarkup(keyboard=list, resize_keyboard=True)
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_command(message: types.Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –º–µ–Ω—é.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
